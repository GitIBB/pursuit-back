// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: articles.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (id, created_at, updated_at, user_id, title, body)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3
)
RETURNING id, created_at, updated_at, user_id, title, body
`

type CreateArticleParams struct {
	UserID uuid.UUID
	Title  string
	Body   string
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle, arg.UserID, arg.Title, arg.Body)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Title,
		&i.Body,
	)
	return i, err
}

const getArticle = `-- name: GetArticle :one
Select id, created_at, updated_at, user_id, title, body FROM articles
WHERE id = $1
`

func (q *Queries) GetArticle(ctx context.Context, id uuid.UUID) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Title,
		&i.Body,
	)
	return i, err
}

const getArticles = `-- name: GetArticles :many
SELECT id, created_at, updated_at, user_id, title, body FROM articles
ORDER BY created_at ASC
`

func (q *Queries) GetArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Title,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
